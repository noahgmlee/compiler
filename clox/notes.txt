Byte Code Compiler & VM:
- Constants kind of restricted to 1-byte index for look up
  - at least at this point I cannot have more than 256 constants in a chunk
- stack based VM for tracking temporary variables
  - mimicking intermediate return values from walking an expression in an AST
  - a little less efficient that having GPRs for intermediate / temporary storage
    - (note that register based VMs do exist)
- trie for keyword / user-defined name identification
  - deterministic finite automaton (DFA), FSA, SA are abstracts that the above fits
- recursive descent parser in rust or jlox had enough context to invoke lowest allowed expression parser handler
  - in clox we have a function dispatch per expression type, so no prescedence recursion
  - we add more global state to the scan - compile - VM pipeline with an active prescedence
- the above leads to a table of functions per expression type:
  - expression type? why yes, some expressions are known by the first token consumed, some are "infix" "1 + 2"
  - so the columns are whether you dispatch the prefix, or infix
- for example, in a binary operation the '-' needs to push the next resolved expression onto the stack before emitting the OP_SUBTRACT byte.
  - contrarily if prefix we negate the next resolved expression
- "type punning" for pretty much all dyn types (instances, strings)
